################################################################################################
#                      Localized strings used by APKEditor
# File naming:
#        strings-[language]-[country(optional)].properties
#    default:
#         strings.properties
#    e.g. : strings-en-US.properties, strings-en.properties
#
# Content: The content is as per specification of java.util.Properties
# Encoding: utf-8 only. If utf-8 can not handle, use escaped hex encoding.
#   format:
#     name={VALUE}
#       name: A unique string of characters starting with a-z , digits 0-9 and underscore '_'
#       {VALUE}: the value
#
#
# Comment: New line starting with '#' character
#
#  NOTES:
#       1 - Optionally, keep the list alphabetically sorted by name.
#       2 - If the name and {VALUE} is the same as default, the entry can be ignored
#
################################################################################################
# Authors: github.com/REAndroid, <Contributors: Please insert here your user name>
################################################################################################

app_version=Displays version information and exit
app_help=Displays this help and exit
build_description=Builds android binary from json/xml/raw.
build_example_1=[Basic]\n  java -jar APKEditor.jar b -i path/input_directory
build_example_2=[Specify output]\n  java -jar APKEditor.jar b -i path/input_directory -o path/output.apk
build_example_3=[Restore signatures]\n  java -jar APKEditor.jar b -t sig -i path/input.apk -sig path/signatures_dir
build_example_4=[Specify framework]\n  java -jar APKEditor.jar b -i path/input_directory -framework framework-res.apk -framework platforms/android-32/android.jar
build_no_cache=Ignore built cached .dex files and re-build smali files.
build_types=Build types, By default build types determined by quick scanning of input directory files. Values are\:
clean_meta=Cleans META-INF directory along with signature block.
comment_level=[Baksmali] Sets the comment level.\n 1) off : No comment will be printed.\n 2) basic : Prints basic and resource id comments.\n 3) detail : Prints class & method relation comments.\n 4) full : Prints all comments.\n **Default = detail
decode_description=Decodes android resources binary to readable json/xml/raw.
decode_example_1=[Basic]\njava -jar APKEditor.jar d -i path/input.apk
decode_example_2=[Specify output]\njava -jar APKEditor.jar d -i path/input.apk -o path/output.apk
decode_example_3=[Specify decode type]\njava -jar APKEditor.jar d -t xml -i path/input.apk
decode_example_4=[Specify framework file(s)]\njava -jar APKEditor.jar d -i path/input.apk -framework framework-res.apk -framework platforms/android-32/android.jar
decode_example_5=[Decode apk signature block]\njava -jar APKEditor.jar d -t sig -i path/input.apk -sig path/signatures_dir
decode_load_dex=Number of dex files to load at a time.\nIf the apk dex files count greater than this value, then the decoder loads one dex at a time.\n  *Applies only when -dex-lib set to internal.\n  *Default = 3\n  *See<Notes> below.
decode_note_1=[internal] Dex builder\:\n* Fully supports dex files up to 042.\n* Highest dex file compression.\n* Builds with similar dex-section order as r8/dx.\n* Convenient dex markers editing, see file smali/classes/dex-file.json \n* Additional helpful smali comments: e.g class/method hierarchy.\n* Supports whitespaces on class simple name as introduced on dex 041+
decode_note_2=[-load-dex] To print correct class/method hierarchy, it is necessary to load all dex files at once. This may result high memory consumption and could fail with "OutOfMemoryError" thus you are required to limit the number of dex files to load at a time. You can overcome this problem with -Xmx memory arg e.g java -Xmx8g -jar APKEditor.jar ...
decode_types=Decode types\:
decode_usage=d [Options, flags]
dump_dex_markers=Dumps dex markers (applies only when smali mode).
duplicate_option_exception=Duplicate option '%s'
dex_lib=Dex library to use\:\n 1) internal : Use internal library, supports dex versions up to 042.\n 2) jf : Use library by JesusFreke/smali, supports dex versions 035 and below.\n  *Default = jf\n  **WARN: The default value will be replaced by "internal" on coming versions.\n  *See <Notes> below.
empty_command_args_exception=Empty command, run with -h to get help
empty_command_option_exception=Empty options, run with <command> -h to get help
extract_native_libs=Sets extractNativeLibs attribute on manifest and applies compression of library files (*.so).\n  *Default = manifest\n  1) manifest: read and apply from manifest.\n  2) none: remove attribute from manifest and store libraries compressed.\n  3) true: set manifest attribute 'true' and store libraries compressed.\n  4) false: set manifest attribute 'false' and store libraries un-compressed with 4096 alignment.
force_delete=Force delete output path.
framework_version_number=Preferred framework version number
help_description=Displays this help and exit.
help_main_footer=To get help about each command run with\:
info_activities=Prints main activity class name. If verbose mode, prints all declared activities including <activity-alias>.
info_app_class_name=Application class name.
info_app_icon=App icon path/value. If verbose mode, prints all configurations.
info_app_icon_round=App round icon path/value. If verbose mode, prints all configurations.
info_app_name=App name. If verbose mode, prints all configurations.
info_app_version_code=App version code.
info_app_version_name=App version name.
info_description=Prints information of apk.
info_dex=Prints dex information.
info_example_1=[Basic]\n  java -jar APKEditor.jar info -i file.apk
info_example_2=[Specify output and type]\n  java -jar APKEditor.jar info -i path/input.apk -t json -v -o info_file.json
info_example_3=[Print only specific type]\n  java -jar APKEditor.jar info -i path/input.apk -resources -filter-type drawable
info_filter_type=Prints only the specified resource type names\n  *This applies only when flag '-resources' used.\n  *Can be multiple.
info_invalid_output_extension=Invalid file extension! Expected '%s', '%s'
info_configurations=Print the configurations in the APK.
info_languages=Print the languages in the APK.
info_locales=Print the locales in the APK.
info_list_files=List files inside apk.
info_list_xml_files=List compiled xml files inside apk.
info_min_sdk_version=Minimum SDK version.
info_package_name=Package name(application id) from manifest and if verbose mode, prints resource table packages.
info_permissions=Permissions.
info_print_types=Print types/formats\:
info_res=Prints resource entries specified by either of\:\n  1) Hex or decimal resource id.\n  2) Full resource name e.g @string/app_name.\n *Can be multiple.
info_resources=Prints all resources
info_signatures=Prints signature information.
info_signatures_base64=Prints signature information with base64 certificates.
info_strings=Print the contents of the resource table string pool in the APK.
info_target_sdk_version=Target SDK version.
info_verbose_mode=Verbose mode.
info_xml_tree=Prints the compiled xmls in the given assets.\n *Can be multiple
info_xml_strings=Print the strings of the given compiled xml assets.\n *Can be multiple
input_path=Input path.
invalid_sig_parameter_combination=Invalid parameter combination!\nSignatures directory provided but missing: -t sig
invalid_type_format=Invalid <%s> string '%s'
keep_original_res=Keeps original res/* file paths\:\n  *Applies only when decoding to xml\n  *All res/* files will be placed on dir <res-files>\n  *The relative paths will be linked to values/*xml
merge_description=Merges split apk files from directory or compressed apk files like XAPK, APKM, APKS ...
merge_example_1=[Basic]\n  java -jar APKEditor.jar m -i path/input -o path/output.apk
missing_input_file=Missing input file.
missing_sig_directory=Missing signatures directory.
missing_value_exception=Missing value for '%s'
no_dex_debug=Drops all debug info from smali/dex.
no_such_directory=No such directory: '%s'
no_such_file=No such file: '%s'.
no_such_file_or_directory=No such file or directory: '%s'
output_path=Output path. Optional, if not provided then a new file will be generated on same directory as input
path_already_exists=Path already exists: '%s'
path_is_directory_expect_file=Path is a directory expecting file: '%s'
path_is_file_expect_directory=Path is a file expecting directory: '%s'
path_of_framework=Path of framework file (can be multiple).
protect_confuse_zip=Confuse zip structure. When this turned on:\n * Apps might crash if accessing apk files directly e.g Class.getResourceAsStream().\n * Some apk scanners might flag it as "Malformed zip"
protect_description=Protects/Obfuscates apk resource files. Using unique obfuscation techniques.
protect_dic_dir_name=Path to a text file containing a list of directory names separated by new line.
protect_dic_file_name=Path to a text file containing a list of file names separated by new line.
protect_example_1=[Basic]\n  java -jar APKEditor.jar p -i path/input.apk -o path/output.apk
protect_keep_type=Keep specific resource type names (e.g drawable), By default keeps only <font> resource type.\n *Can be multiple
protect_skip_manifest=Do not protect manifest.
raw_dex=Copy raw dex files / skip smali.
res_dir_name=Sets resource files root dir name. e.g. for obfuscation to move files from 'res/*' to 'r/*' or vice versa.
refactor_description=Refactors obfuscated resource names
refactor_example_1=[Basic]\n  java -jar APKEditor.jar x -i path/input.apk -o path/output.apk
refactor_fix_types=Corrects resource type names based on usages and values
refactor_public_xml=Path of resource ids xml file (public.xml)\nLoads names and applies to resources from 'public.xml' file
signatures_path=Signatures directory path.
smali_registers=[Baksmali] Use ".registers" directive instead of the default ".locals".
split_json=Splits resources.arsc into multiple parts as per type entries (use this for large files)
title_commands=Commands\:
title_app_description=Android binary resource files editor
title_example=Examples\:
title_flags=Flags\:
title_options=Options\:
title_other_options=Other options\:
title_notes=Notes\:
title_usage=Usage\:
unknown_command_exception=Unknown command\: '%s'
unknown_option_exception=Unknown option\: '%s'
validate_modules=Validates for same versionNumber of base.apk with split apk files.
validate_resources_dir=Validate resources dir name\n(eg. if a drawable resource file path is 'res/abc.png' then it will be moved to 'res/drawable/abc.png)'
